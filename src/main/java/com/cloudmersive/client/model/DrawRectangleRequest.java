/**
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cloudmersive.client.model;

import com.cloudmersive.client.model.DrawRectangleInstance;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Request to draw one or more rectangles on a base image
 **/
@ApiModel(description = "Request to draw one or more rectangles on a base image")
public class DrawRectangleRequest {
  
  @SerializedName("BaseImageBytes")
  private byte[] baseImageBytes = null;
  @SerializedName("BaseImageUrl")
  private String baseImageUrl = null;
  @SerializedName("RectanglesToDraw")
  private List<DrawRectangleInstance> rectanglesToDraw = null;

  /**
   * Image to draw rectangles on, in bytes.  You can also use the BaseImageUrl instead to supply image input as a URL
   **/
  @ApiModelProperty(value = "Image to draw rectangles on, in bytes.  You can also use the BaseImageUrl instead to supply image input as a URL")
  public byte[] getBaseImageBytes() {
    return baseImageBytes;
  }
  public void setBaseImageBytes(byte[] baseImageBytes) {
    this.baseImageBytes = baseImageBytes;
  }

  /**
   * Image to draw rectangles on, as an HTTP or HTTPS fully-qualified URL
   **/
  @ApiModelProperty(value = "Image to draw rectangles on, as an HTTP or HTTPS fully-qualified URL")
  public String getBaseImageUrl() {
    return baseImageUrl;
  }
  public void setBaseImageUrl(String baseImageUrl) {
    this.baseImageUrl = baseImageUrl;
  }

  /**
   * Rectangles to draw on the image.  Rectangles are drawn in index order.
   **/
  @ApiModelProperty(value = "Rectangles to draw on the image.  Rectangles are drawn in index order.")
  public List<DrawRectangleInstance> getRectanglesToDraw() {
    return rectanglesToDraw;
  }
  public void setRectanglesToDraw(List<DrawRectangleInstance> rectanglesToDraw) {
    this.rectanglesToDraw = rectanglesToDraw;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DrawRectangleRequest drawRectangleRequest = (DrawRectangleRequest) o;
    return (this.baseImageBytes == null ? drawRectangleRequest.baseImageBytes == null : this.baseImageBytes.equals(drawRectangleRequest.baseImageBytes)) &&
        (this.baseImageUrl == null ? drawRectangleRequest.baseImageUrl == null : this.baseImageUrl.equals(drawRectangleRequest.baseImageUrl)) &&
        (this.rectanglesToDraw == null ? drawRectangleRequest.rectanglesToDraw == null : this.rectanglesToDraw.equals(drawRectangleRequest.rectanglesToDraw));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.baseImageBytes == null ? 0: this.baseImageBytes.hashCode());
    result = 31 * result + (this.baseImageUrl == null ? 0: this.baseImageUrl.hashCode());
    result = 31 * result + (this.rectanglesToDraw == null ? 0: this.rectanglesToDraw.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class DrawRectangleRequest {\n");
    
    sb.append("  baseImageBytes: ").append(baseImageBytes).append("\n");
    sb.append("  baseImageUrl: ").append(baseImageUrl).append("\n");
    sb.append("  rectanglesToDraw: ").append(rectanglesToDraw).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
