/**
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cloudmersive.client.model;

import com.cloudmersive.client.model.RecognitionOutcome;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Result of recognizing an image
 **/
@ApiModel(description = "Result of recognizing an image")
public class ImageDescriptionResponse {
  
  @SerializedName("Successful")
  private Boolean successful = null;
  @SerializedName("Highconfidence")
  private Boolean highconfidence = null;
  @SerializedName("BestOutcome")
  private RecognitionOutcome bestOutcome = null;
  @SerializedName("RunnerUpOutcome")
  private RecognitionOutcome runnerUpOutcome = null;

  /**
   * Was the image processed successfully?
   **/
  @ApiModelProperty(value = "Was the image processed successfully?")
  public Boolean getSuccessful() {
    return successful;
  }
  public void setSuccessful(Boolean successful) {
    this.successful = successful;
  }

  /**
   * Is the resulting best outcome recognition a high confidence outcome?
   **/
  @ApiModelProperty(value = "Is the resulting best outcome recognition a high confidence outcome?")
  public Boolean getHighconfidence() {
    return highconfidence;
  }
  public void setHighconfidence(Boolean highconfidence) {
    this.highconfidence = highconfidence;
  }

  /**
   * The best Machine Learning outcome
   **/
  @ApiModelProperty(value = "The best Machine Learning outcome")
  public RecognitionOutcome getBestOutcome() {
    return bestOutcome;
  }
  public void setBestOutcome(RecognitionOutcome bestOutcome) {
    this.bestOutcome = bestOutcome;
  }

  /**
   * Best backup (\"runner up\") Machine Learning outcome
   **/
  @ApiModelProperty(value = "Best backup (\"runner up\") Machine Learning outcome")
  public RecognitionOutcome getRunnerUpOutcome() {
    return runnerUpOutcome;
  }
  public void setRunnerUpOutcome(RecognitionOutcome runnerUpOutcome) {
    this.runnerUpOutcome = runnerUpOutcome;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageDescriptionResponse imageDescriptionResponse = (ImageDescriptionResponse) o;
    return (this.successful == null ? imageDescriptionResponse.successful == null : this.successful.equals(imageDescriptionResponse.successful)) &&
        (this.highconfidence == null ? imageDescriptionResponse.highconfidence == null : this.highconfidence.equals(imageDescriptionResponse.highconfidence)) &&
        (this.bestOutcome == null ? imageDescriptionResponse.bestOutcome == null : this.bestOutcome.equals(imageDescriptionResponse.bestOutcome)) &&
        (this.runnerUpOutcome == null ? imageDescriptionResponse.runnerUpOutcome == null : this.runnerUpOutcome.equals(imageDescriptionResponse.runnerUpOutcome));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.successful == null ? 0: this.successful.hashCode());
    result = 31 * result + (this.highconfidence == null ? 0: this.highconfidence.hashCode());
    result = 31 * result + (this.bestOutcome == null ? 0: this.bestOutcome.hashCode());
    result = 31 * result + (this.runnerUpOutcome == null ? 0: this.runnerUpOutcome.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageDescriptionResponse {\n");
    
    sb.append("  successful: ").append(successful).append("\n");
    sb.append("  highconfidence: ").append(highconfidence).append("\n");
    sb.append("  bestOutcome: ").append(bestOutcome).append("\n");
    sb.append("  runnerUpOutcome: ").append(runnerUpOutcome).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
