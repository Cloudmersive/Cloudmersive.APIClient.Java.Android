/**
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cloudmersive.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Text instance to draw on an image
 **/
@ApiModel(description = "Text instance to draw on an image")
public class DrawTextInstance {
  
  @SerializedName("Text")
  private String text = null;
  @SerializedName("FontFamilyName")
  private String fontFamilyName = null;
  @SerializedName("FontSize")
  private Double fontSize = null;
  @SerializedName("Color")
  private String color = null;
  @SerializedName("X")
  private Double X = null;
  @SerializedName("Y")
  private Double Y = null;
  @SerializedName("Width")
  private Double width = null;
  @SerializedName("Height")
  private Double height = null;

  /**
   * Text string to draw
   **/
  @ApiModelProperty(value = "Text string to draw")
  public String getText() {
    return text;
  }
  public void setText(String text) {
    this.text = text;
  }

  /**
   * Font Family to use.  Leave blank to default to \"Arial\".
   **/
  @ApiModelProperty(value = "Font Family to use.  Leave blank to default to \"Arial\".")
  public String getFontFamilyName() {
    return fontFamilyName;
  }
  public void setFontFamilyName(String fontFamilyName) {
    this.fontFamilyName = fontFamilyName;
  }

  /**
   * Font size to use.
   **/
  @ApiModelProperty(value = "Font size to use.")
  public Double getFontSize() {
    return fontSize;
  }
  public void setFontSize(Double fontSize) {
    this.fontSize = fontSize;
  }

  /**
   * Color to use - can be a hex value (with #) or HTML common color name
   **/
  @ApiModelProperty(value = "Color to use - can be a hex value (with #) or HTML common color name")
  public String getColor() {
    return color;
  }
  public void setColor(String color) {
    this.color = color;
  }

  /**
   * Pixel location of the left edge of the text location
   **/
  @ApiModelProperty(value = "Pixel location of the left edge of the text location")
  public Double getX() {
    return X;
  }
  public void setX(Double X) {
    this.X = X;
  }

  /**
   * Pixel location of the top edge of the text location
   **/
  @ApiModelProperty(value = "Pixel location of the top edge of the text location")
  public Double getY() {
    return Y;
  }
  public void setY(Double Y) {
    this.Y = Y;
  }

  /**
   * Width in pixels of the text box to draw the text in; text will wrap inside this box
   **/
  @ApiModelProperty(value = "Width in pixels of the text box to draw the text in; text will wrap inside this box")
  public Double getWidth() {
    return width;
  }
  public void setWidth(Double width) {
    this.width = width;
  }

  /**
   * Height in pixels of the text box to draw the text in; text will wrap inside this box
   **/
  @ApiModelProperty(value = "Height in pixels of the text box to draw the text in; text will wrap inside this box")
  public Double getHeight() {
    return height;
  }
  public void setHeight(Double height) {
    this.height = height;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DrawTextInstance drawTextInstance = (DrawTextInstance) o;
    return (this.text == null ? drawTextInstance.text == null : this.text.equals(drawTextInstance.text)) &&
        (this.fontFamilyName == null ? drawTextInstance.fontFamilyName == null : this.fontFamilyName.equals(drawTextInstance.fontFamilyName)) &&
        (this.fontSize == null ? drawTextInstance.fontSize == null : this.fontSize.equals(drawTextInstance.fontSize)) &&
        (this.color == null ? drawTextInstance.color == null : this.color.equals(drawTextInstance.color)) &&
        (this.X == null ? drawTextInstance.X == null : this.X.equals(drawTextInstance.X)) &&
        (this.Y == null ? drawTextInstance.Y == null : this.Y.equals(drawTextInstance.Y)) &&
        (this.width == null ? drawTextInstance.width == null : this.width.equals(drawTextInstance.width)) &&
        (this.height == null ? drawTextInstance.height == null : this.height.equals(drawTextInstance.height));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.text == null ? 0: this.text.hashCode());
    result = 31 * result + (this.fontFamilyName == null ? 0: this.fontFamilyName.hashCode());
    result = 31 * result + (this.fontSize == null ? 0: this.fontSize.hashCode());
    result = 31 * result + (this.color == null ? 0: this.color.hashCode());
    result = 31 * result + (this.X == null ? 0: this.X.hashCode());
    result = 31 * result + (this.Y == null ? 0: this.Y.hashCode());
    result = 31 * result + (this.width == null ? 0: this.width.hashCode());
    result = 31 * result + (this.height == null ? 0: this.height.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class DrawTextInstance {\n");
    
    sb.append("  text: ").append(text).append("\n");
    sb.append("  fontFamilyName: ").append(fontFamilyName).append("\n");
    sb.append("  fontSize: ").append(fontSize).append("\n");
    sb.append("  color: ").append(color).append("\n");
    sb.append("  X: ").append(X).append("\n");
    sb.append("  Y: ").append(Y).append("\n");
    sb.append("  width: ").append(width).append("\n");
    sb.append("  height: ").append(height).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
