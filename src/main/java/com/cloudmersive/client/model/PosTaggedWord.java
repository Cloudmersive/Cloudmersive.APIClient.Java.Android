/**
 * nlpapi
 * The powerful Natural Language Processing APIs let you perform part of speech tagging, entity identification, sentence parsing, and much more to help you understand the meaning of unstructured text.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cloudmersive.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Word tagged in a POS tag
 **/
@ApiModel(description = "Word tagged in a POS tag")
public class PosTaggedWord {
  
  @SerializedName("Word")
  private Object word = null;
  @SerializedName("Tag")
  private Object tag = null;

  /**
   * Word that was tagged
   **/
  @ApiModelProperty(value = "Word that was tagged")
  public Object getWord() {
    return word;
  }
  public void setWord(Object word) {
    this.word = word;
  }

  /**
   * Penn Treebank tag applied to the word
   **/
  @ApiModelProperty(value = "Penn Treebank tag applied to the word")
  public Object getTag() {
    return tag;
  }
  public void setTag(Object tag) {
    this.tag = tag;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PosTaggedWord posTaggedWord = (PosTaggedWord) o;
    return (this.word == null ? posTaggedWord.word == null : this.word.equals(posTaggedWord.word)) &&
        (this.tag == null ? posTaggedWord.tag == null : this.tag.equals(posTaggedWord.tag));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.word == null ? 0: this.word.hashCode());
    result = 31 * result + (this.tag == null ? 0: this.tag.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class PosTaggedWord {\n");
    
    sb.append("  word: ").append(word).append("\n");
    sb.append("  tag: ").append(tag).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
