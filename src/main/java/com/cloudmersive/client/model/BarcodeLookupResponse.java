/**
 * barcodeapi
 * Barcode APIs let you generate barcode images, and recognize values from images of barcodes.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cloudmersive.client.model;

import com.cloudmersive.client.model.ProductMatch;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class BarcodeLookupResponse {
  
  @SerializedName("Successful")
  private Boolean successful = null;
  @SerializedName("Matches")
  private List<ProductMatch> matches = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public Boolean getSuccessful() {
    return successful;
  }
  public void setSuccessful(Boolean successful) {
    this.successful = successful;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public List<ProductMatch> getMatches() {
    return matches;
  }
  public void setMatches(List<ProductMatch> matches) {
    this.matches = matches;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BarcodeLookupResponse barcodeLookupResponse = (BarcodeLookupResponse) o;
    return (this.successful == null ? barcodeLookupResponse.successful == null : this.successful.equals(barcodeLookupResponse.successful)) &&
        (this.matches == null ? barcodeLookupResponse.matches == null : this.matches.equals(barcodeLookupResponse.matches));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.successful == null ? 0: this.successful.hashCode());
    result = 31 * result + (this.matches == null ? 0: this.matches.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class BarcodeLookupResponse {\n");
    
    sb.append("  successful: ").append(successful).append("\n");
    sb.append("  matches: ").append(matches).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
