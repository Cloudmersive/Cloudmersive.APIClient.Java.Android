/**
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cloudmersive.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Rectangle instance to draw on an image
 **/
@ApiModel(description = "Rectangle instance to draw on an image")
public class DrawRectangleInstance {
  
  @SerializedName("BorderColor")
  private String borderColor = null;
  @SerializedName("BorderWidth")
  private Double borderWidth = null;
  @SerializedName("FillColor")
  private String fillColor = null;
  @SerializedName("X")
  private Double X = null;
  @SerializedName("Y")
  private Double Y = null;
  @SerializedName("Width")
  private Double width = null;
  @SerializedName("Height")
  private Double height = null;

  /**
   * Border Color to use - can be a hex value (with #) or HTML common color name.  Transparent colors are supported.
   **/
  @ApiModelProperty(value = "Border Color to use - can be a hex value (with #) or HTML common color name.  Transparent colors are supported.")
  public String getBorderColor() {
    return borderColor;
  }
  public void setBorderColor(String borderColor) {
    this.borderColor = borderColor;
  }

  /**
   * Width in pixels of the border.  Pass in 0 to draw a rectangle with no border
   **/
  @ApiModelProperty(value = "Width in pixels of the border.  Pass in 0 to draw a rectangle with no border")
  public Double getBorderWidth() {
    return borderWidth;
  }
  public void setBorderWidth(Double borderWidth) {
    this.borderWidth = borderWidth;
  }

  /**
   * Fill Color to use - can be a hex value (with #) or HTML common color name.  Transparent colors are supported.  Leave blank to not fill the rectangle.
   **/
  @ApiModelProperty(value = "Fill Color to use - can be a hex value (with #) or HTML common color name.  Transparent colors are supported.  Leave blank to not fill the rectangle.")
  public String getFillColor() {
    return fillColor;
  }
  public void setFillColor(String fillColor) {
    this.fillColor = fillColor;
  }

  /**
   * Pixel location of the left edge of the rectangle location
   **/
  @ApiModelProperty(value = "Pixel location of the left edge of the rectangle location")
  public Double getX() {
    return X;
  }
  public void setX(Double X) {
    this.X = X;
  }

  /**
   * Pixel location of the top edge of the rectangle location
   **/
  @ApiModelProperty(value = "Pixel location of the top edge of the rectangle location")
  public Double getY() {
    return Y;
  }
  public void setY(Double Y) {
    this.Y = Y;
  }

  /**
   * Width in pixels of the rectangle
   **/
  @ApiModelProperty(value = "Width in pixels of the rectangle")
  public Double getWidth() {
    return width;
  }
  public void setWidth(Double width) {
    this.width = width;
  }

  /**
   * Height in pixels of the rectangle
   **/
  @ApiModelProperty(value = "Height in pixels of the rectangle")
  public Double getHeight() {
    return height;
  }
  public void setHeight(Double height) {
    this.height = height;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DrawRectangleInstance drawRectangleInstance = (DrawRectangleInstance) o;
    return (this.borderColor == null ? drawRectangleInstance.borderColor == null : this.borderColor.equals(drawRectangleInstance.borderColor)) &&
        (this.borderWidth == null ? drawRectangleInstance.borderWidth == null : this.borderWidth.equals(drawRectangleInstance.borderWidth)) &&
        (this.fillColor == null ? drawRectangleInstance.fillColor == null : this.fillColor.equals(drawRectangleInstance.fillColor)) &&
        (this.X == null ? drawRectangleInstance.X == null : this.X.equals(drawRectangleInstance.X)) &&
        (this.Y == null ? drawRectangleInstance.Y == null : this.Y.equals(drawRectangleInstance.Y)) &&
        (this.width == null ? drawRectangleInstance.width == null : this.width.equals(drawRectangleInstance.width)) &&
        (this.height == null ? drawRectangleInstance.height == null : this.height.equals(drawRectangleInstance.height));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.borderColor == null ? 0: this.borderColor.hashCode());
    result = 31 * result + (this.borderWidth == null ? 0: this.borderWidth.hashCode());
    result = 31 * result + (this.fillColor == null ? 0: this.fillColor.hashCode());
    result = 31 * result + (this.X == null ? 0: this.X.hashCode());
    result = 31 * result + (this.Y == null ? 0: this.Y.hashCode());
    result = 31 * result + (this.width == null ? 0: this.width.hashCode());
    result = 31 * result + (this.height == null ? 0: this.height.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class DrawRectangleInstance {\n");
    
    sb.append("  borderColor: ").append(borderColor).append("\n");
    sb.append("  borderWidth: ").append(borderWidth).append("\n");
    sb.append("  fillColor: ").append(fillColor).append("\n");
    sb.append("  X: ").append(X).append("\n");
    sb.append("  Y: ").append(Y).append("\n");
    sb.append("  width: ").append(width).append("\n");
    sb.append("  height: ").append(height).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
